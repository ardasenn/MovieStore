// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20240116123844_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("Domain.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDirector")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a42b21c1-bf20-4730-bf32-616637f29f01"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5241),
                            FirstName = "Cem",
                            IsDirector = true,
                            LastName = "Yılmaz",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("9027c4c8-114c-4872-816f-e49111b7121f"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5245),
                            FirstName = "Demet",
                            IsDirector = false,
                            LastName = "Evgar",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("057cea6d-7762-4d3f-ae63-039492fee274"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5247),
                            FirstName = "Rasim",
                            IsDirector = false,
                            LastName = "Öztekin",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ed5c0621-adf7-4318-aedf-7d088a913071"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5248),
                            FirstName = "Zafer",
                            IsDirector = false,
                            LastName = "Algöz",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("9799acb4-bad5-4802-9eac-f066b1b66a63"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5250),
                            FirstName = "Ozan",
                            IsDirector = false,
                            LastName = "Güven",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1ecd834d-8215-432f-bd6f-fe4224fafacd"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5252),
                            FirstName = "Cengiz",
                            IsDirector = false,
                            LastName = "Bozkurt",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ba4bfa40-d5e7-4edf-b35b-1f9e3451b5b6"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5254),
                            FirstName = "İlker",
                            IsDirector = false,
                            LastName = "Kaleli",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("243cbeba-9a15-464b-8da9-d3e479ba50b2"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5256),
                            FirstName = "Melisa",
                            IsDirector = false,
                            LastName = "Aslı Pamuk",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("431fd310-c959-4513-b9f8-c0aa3faae286"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5259),
                            FirstName = "Ahmet",
                            IsDirector = false,
                            LastName = "Kural",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("3611a6d8-1516-4318-bbc7-63aac373eb5a"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5262),
                            FirstName = "Rasim",
                            IsDirector = false,
                            LastName = "Öztekin",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MovieId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3f4fd215-e301-4b31-9246-19b0834b60ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14076ecf-09f6-4d48-a3c1-9c36a7b3c2f0",
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5067),
                            Email = "ardasen.96@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARDASEN.96@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECg6f0/tC/kbk70RGXAquYaFgyzsWl8hLjLuA5+eQIHwCAKW0oJtm38wYRjhTNsuvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e65919f-cf91-4a90-bd58-cfe39c01f523",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b70cb7e-d77e-4871-9403-986cf5f8b17f"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5204),
                            Name = "Aksiyon",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("82a20df2-54ef-45ec-9840-0d4deed48856"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5208),
                            Name = "Drama",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("bb5eccb8-0857-4dc5-96bd-a33e3fffea8f"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5222),
                            Name = "Bilim Kurgu",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a190809c-12f0-48b7-a8c4-bd7abb909ddd"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5223),
                            Name = "Romantik",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("69e76573-cfab-4405-9649-20b70b8c1c29"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5225),
                            Name = "Korku",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ff7b1724-4032-4021-b081-789da90c149c"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5228),
                            Name = "Fantastik",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("41030c52-ad3b-4422-999b-d0b737a9e85e"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5229),
                            Name = "Komedi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8b37b35d-50f6-49c6-9514-dc0851de5426"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5231),
                            Name = "Gerilim",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("e0a1794b-2def-44bd-ae59-c445bb66e589"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5232),
                            Name = "Belgesel",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("add742e5-3b65-47fb-9b69-bb7e427ece2f"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5235),
                            Name = "Macera",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Imdb")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SalesQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("917faaaf-8f53-4f68-97d7-7f43706c3d23"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5286),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 7.2999999999999998,
                            Name = "Arog",
                            Price = 28.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 10,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("5fc52fd4-092d-4b67-9a33-a0dd7542d967"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5317),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 7.7999999999999998,
                            Name = "G.O.R.A",
                            Price = 25.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 15,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c1611eeb-4353-4e70-8252-79e0418b0ddf"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5323),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.9000000000000004,
                            Name = "Yahşi Batı",
                            Price = 30.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 8,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("56395ca2-b570-49c3-9ec0-645371db6e4f"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5329),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 8.0999999999999996,
                            Name = "CM101MMXI Fundamentals",
                            Price = 32.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 20,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7c5854b6-7e8a-4127-b06a-8ec34b8a7854"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5334),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.2999999999999998,
                            Name = "Pek Yakında",
                            Price = 27.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 12,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7f5cc6b3-93dd-41c9-be42-f4eacead8c29"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5341),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.7000000000000002,
                            Name = "Arif v 216",
                            Price = 35.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 18,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("6d29b93d-e589-436c-b736-52bfd90d60a5"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5349),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 7.5,
                            Name = "Gora + Arog",
                            Price = 40.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 25,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("bbdefef2-150b-4bfe-9f20-5f9485b0993a"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5354),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.2000000000000002,
                            Name = "Ali Baba ve 7 Cüceler",
                            Price = 33.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 14,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0d4855ff-135a-426c-bb90-a6481c95f346"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5359),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.7000000000000002,
                            Name = "Cehennem Melekleri 2",
                            Price = 29.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 22,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("b0c0706a-5496-4944-a410-b043a6250cd4"),
                            CreationDate = new DateTime(2024, 1, 16, 12, 38, 44, 23, DateTimeKind.Utc).AddTicks(5366),
                            DirectorId = "a42b21c1-bf20-4730-bf32-616637f29f01",
                            Imdb = 6.5,
                            Name = "Fasulye",
                            Price = 26.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 16,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieOrder", b =>
                {
                    b.Property<Guid>("MovieListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieListId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("MovieOrder");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieOrder", b =>
                {
                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
