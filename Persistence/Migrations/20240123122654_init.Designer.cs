// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20240123122654_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("Domain.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDirector")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdea1ee6-3748-4a12-8177-937e67806ad7"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7204),
                            FirstName = "Cem",
                            IsDirector = true,
                            LastName = "Yılmaz",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0ee3ec71-533e-4c8f-8139-6a5fa889962e"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7207),
                            FirstName = "Demet",
                            IsDirector = false,
                            LastName = "Evgar",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("6eb014d4-fd5b-4cf8-826a-c698ce5bd521"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7209),
                            FirstName = "Rasim",
                            IsDirector = false,
                            LastName = "Öztekin",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("334ac3d6-eff0-4bc0-b6f8-ef31dd4648fc"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7210),
                            FirstName = "Zafer",
                            IsDirector = false,
                            LastName = "Algöz",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("b83e3bd9-acce-4e2a-ad9f-82fc0c698d95"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7212),
                            FirstName = "Ozan",
                            IsDirector = false,
                            LastName = "Güven",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c7cf15f4-fade-46db-b389-aa82bd583f9e"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7214),
                            FirstName = "Cengiz",
                            IsDirector = false,
                            LastName = "Bozkurt",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("0b413fcb-665d-481a-8840-605dc79cd9dc"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7216),
                            FirstName = "İlker",
                            IsDirector = false,
                            LastName = "Kaleli",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d2a9d6aa-625e-4538-81b3-50301574157e"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7217),
                            FirstName = "Melisa",
                            IsDirector = false,
                            LastName = "Aslı Pamuk",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("29f70065-80ab-4f9a-a208-fc2c3d0df1b3"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7221),
                            FirstName = "Ahmet",
                            IsDirector = false,
                            LastName = "Kural",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8eb63b9e-46c3-464e-a1cb-f02418e65a24"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7223),
                            FirstName = "Rasim",
                            IsDirector = false,
                            LastName = "Öztekin",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MovieId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e2ab6248-a8e0-4ebb-9e63-01fd1ee81943",
                            AccessFailedCount = 0,
                            Balance = 100m,
                            ConcurrencyStamp = "7c98c017-1cb1-46eb-b5e2-bc7a0d2be5a4",
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7088),
                            Email = "ardasen.96@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARDASEN.96@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECg6f0/tC/kbk70RGXAquYaFgyzsWl8hLjLuA5+eQIHwCAKW0oJtm38wYRjhTNsuvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c73079a1-f81b-43b1-be39-94e540469a51",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38b77ec7-38ad-4ce6-95eb-6f01b0f45a39"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7165),
                            Name = "Aksiyon",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("32da1d4d-b4ba-4ff2-a2e4-4df38f3c7e76"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7170),
                            Name = "Drama",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("a567e33b-b204-4aa0-a1c2-77ed5664d98b"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7184),
                            Name = "Bilim Kurgu",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("c08aed8f-d363-4fba-af8e-6988a8ce500c"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7186),
                            Name = "Romantik",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1bd5a2e7-71fa-4654-a2e4-205413e880dd"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7187),
                            Name = "Korku",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("3e2cc64a-c837-4250-8d05-5ca420a2b9de"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7190),
                            Name = "Fantastik",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("25a2cbbd-c390-4b9e-9a1c-d41da19686b1"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7192),
                            Name = "Komedi",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("85fdc836-300a-4827-a6f6-256449c09040"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7193),
                            Name = "Gerilim",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("ceef3b04-7c4a-40ae-af38-dd9b1857256b"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7195),
                            Name = "Belgesel",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("533b0e2e-42e4-4b60-9c23-95a0b757c556"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7197),
                            Name = "Macera",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DirectorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Imdb")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SalesQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4de6f805-5b20-4477-9679-59e9f08ba498"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7263),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 7.2999999999999998,
                            Name = "Arog",
                            Price = 28.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 10,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("b3873176-fd03-496c-abfd-bf33caab5270"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7270),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 7.7999999999999998,
                            Name = "G.O.R.A",
                            Price = 25.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 15,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("5bc965ee-12a4-4222-84f5-2ff43da3a558"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7275),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.9000000000000004,
                            Name = "Yahşi Batı",
                            Price = 30.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 8,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("75e60cac-1a2b-4318-bf58-ba59b8978c92"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7280),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 8.0999999999999996,
                            Name = "CM101MMXI Fundamentals",
                            Price = 32.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 20,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8716c451-3694-4c6e-89ee-2cb720f13a47"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7285),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.2999999999999998,
                            Name = "Pek Yakında",
                            Price = 27.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 12,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("d04d3074-b167-47ad-bad8-24bad2cacd53"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7292),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.7000000000000002,
                            Name = "Arif v 216",
                            Price = 35.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 18,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("7cbcc5b6-e8d8-42ee-829a-7707c0dcfbf8"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7299),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 7.5,
                            Name = "Gora + Arog",
                            Price = 40.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 25,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("8c363a61-9adb-47cb-8b39-c5cc85494b92"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7304),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.2000000000000002,
                            Name = "Ali Baba ve 7 Cüceler",
                            Price = 33.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 14,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("e8c8de3c-8943-41d0-a1c1-2359b6741796"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7308),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.7000000000000002,
                            Name = "Cehennem Melekleri 2",
                            Price = 29.00m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 22,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("f94b0f0f-baff-42e0-a918-c0041378dd1c"),
                            CreationDate = new DateTime(2024, 1, 23, 12, 26, 54, 423, DateTimeKind.Utc).AddTicks(7314),
                            DirectorId = "fdea1ee6-3748-4a12-8177-937e67806ad7",
                            Imdb = 6.5,
                            Name = "Fasulye",
                            Price = 26.50m,
                            ReleaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SalesQuantity = 16,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<Guid>("GenresId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uuid");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieOrder", b =>
                {
                    b.Property<Guid>("MovieListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieListId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("MovieOrder");
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Comments")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieOrder", b =>
                {
                    b.HasOne("Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
